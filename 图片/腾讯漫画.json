{
    "id": "7745c3e0-d03e-4330-a1a1-ff626bab3840",
    "createTime": 1595846063742478,
    "modifiedTime": 1595845903991974,
    "author": "瓜",
    "postScript": "",
    "name": "腾讯漫画",
    "host": "https://ac.qq.com",
    "group": "",
    "contentType": 0,
    "sort": 0,
    "useCryptoJS": true,
    "loadJs": "",
    "userAgent": "",
    "enableDiscover": true,
    "discoverUrl": "@js:\n\n\nvar allTypes = {\r\n  '排序': {\r\n    '更新时间': 'search/time',\r\n    '热门人气': 'search/hot'\r\n  },\r\n  '属性': {\r\n    '付费': 'vip/2',\r\n    '免费': 'vip/1',\r\n  },\r\n  '进度': {\r\n    '连载': 'finish/1',\r\n    '完结': 'finish/2',\r\n  },\r\n  '标签': {\r\n    \"恋爱\": \"theme/105\",\r\n    \"玄幻\": \"theme/101\",\r\n    \"异能\": \"theme/103\",\r\n    \"恐怖\": \"theme/110\",\r\n    \"剧情\": \"theme/106\",\r\n    \"科幻\": \"theme/108\",\r\n    \"悬疑\": \"theme/112\",\r\n    \"奇幻\": \"theme/102\",\r\n    \"冒险\": \"theme/104\",\r\n    \"犯罪\": \"theme/111\",\r\n    \"动作\": \"theme/109\",\r\n    \"日常\": \"theme/113\",\r\n    \"竞技\": \"theme/114\",\r\n    \"武侠\": \"theme/115\",\r\n    \"历史\": \"theme/116\",\r\n  }\r\n};\r\n\r\nvar base = \"/Comic/all/page/$page/\";\r\nvar finds = [`全部::${base}`];\r\nfor (var typeName in allTypes) {\r\n  var subType = allTypes[typeName];\r\n  for (var subTypeName in subType) {\r\n    finds.push(`${typeName}::${subTypeName}::${base}${subType[subTypeName]}`);\r\n  }\r\n}\r\nfinds",
    "discoverItems": "",
    "discoverList": ".ret-search-list li",
    "discoverTags": ".ret-works-tags@text",
    "discoverName": "h3 a@text",
    "discoverCover": "img@data-original",
    "discoverAuthor": ".ret-works-author@text",
    "discoverChapter": ".mod-cover-list-text@text",
    "discoverDescription": ".ret-works-decs@text",
    "discoverResult": "h3 a@href",
    "enableSearch": true,
    "searchUrl": "https://ac.qq.com/Comic/searchList?search=$keyword&page=$page",
    "searchItems": "",
    "searchList": ".mod_book_list li",
    "searchTags": ".mod_books_tag@text",
    "searchName": "h4@text",
    "searchCover": "img@data-original",
    "searchAuthor": "",
    "searchChapter": ".mod_book_update@text",
    "searchDescription": "",
    "searchResult": "h4 a@href",
    "enableMultiRoads": false,
    "chapterRoads": "",
    "chapterRoadName": "",
    "chapterUrl": "",
    "chapterItems": "",
    "chapterList": ".chapter-page-all span",
    "chapterName": "text",
    "chapterCover": "",
    "chapterLock": ".ui-icon-pay@class",
    "chapterTime": "",
    "chapterResult": "a@href",
    "contentUrl": "",
    "contentItems": "@js:\n\n\n/**\r\n*\r\n*  Base64 encode / decode\r\n*\r\n*  @author haitao.tu\r\n*  @date   2010-04-26\r\n*  @email  tuhaitao@foxmail.com\r\n*\r\n*/\r\n\r\nfunction Base64() {\r\n\r\n  // private property\r\n  _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\r\n  // public method for encoding\r\n  this.encode = function (input) {\r\n    var output = \"\";\r\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n    var i = 0;\r\n    input = _utf8_encode(input);\r\n    while (i < input.length) {\r\n      chr1 = input.charCodeAt(i++);\r\n      chr2 = input.charCodeAt(i++);\r\n      chr3 = input.charCodeAt(i++);\r\n      enc1 = chr1 >> 2;\r\n      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n      enc4 = chr3 & 63;\r\n      if (isNaN(chr2)) {\r\n        enc3 = enc4 = 64;\r\n      } else if (isNaN(chr3)) {\r\n        enc4 = 64;\r\n      }\r\n      output = output +\r\n        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\r\n        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  // public method for decoding\r\n  this.decode = function (input) {\r\n    var output = \"\";\r\n    var chr1, chr2, chr3;\r\n    var enc1, enc2, enc3, enc4;\r\n    var i = 0;\r\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n    while (i < input.length) {\r\n      enc1 = _keyStr.indexOf(input.charAt(i++));\r\n      enc2 = _keyStr.indexOf(input.charAt(i++));\r\n      enc3 = _keyStr.indexOf(input.charAt(i++));\r\n      enc4 = _keyStr.indexOf(input.charAt(i++));\r\n      chr1 = (enc1 << 2) | (enc2 >> 4);\r\n      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n      chr3 = ((enc3 & 3) << 6) | enc4;\r\n      output = output + String.fromCharCode(chr1);\r\n      if (enc3 != 64) {\r\n        output = output + String.fromCharCode(chr2);\r\n      }\r\n      if (enc4 != 64) {\r\n        output = output + String.fromCharCode(chr3);\r\n      }\r\n    }\r\n    output = _utf8_decode(output);\r\n    return output;\r\n  }\r\n\r\n  // private method for UTF-8 encoding\r\n  _utf8_encode = function (string) {\r\n    string = string.replace(/\\r\\n/g, \"\\n\");\r\n    var utftext = \"\";\r\n    for (var n = 0; n < string.length; n++) {\r\n      var c = string.charCodeAt(n);\r\n      if (c < 128) {\r\n        utftext += String.fromCharCode(c);\r\n      } else if ((c > 127) && (c < 2048)) {\r\n        utftext += String.fromCharCode((c >> 6) | 192);\r\n        utftext += String.fromCharCode((c & 63) | 128);\r\n      } else {\r\n        utftext += String.fromCharCode((c >> 12) | 224);\r\n        utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n        utftext += String.fromCharCode((c & 63) | 128);\r\n      }\r\n\r\n    }\r\n    return utftext;\r\n  }\r\n\r\n  // private method for UTF-8 decoding\r\n  _utf8_decode = function (utftext) {\r\n    var string = \"\";\r\n    var i = 0;\r\n    var c = c1 = c2 = 0;\r\n    while (i < utftext.length) {\r\n      c = utftext.charCodeAt(i);\r\n      if (c < 128) {\r\n        string += String.fromCharCode(c);\r\n        i++;\r\n      } else if ((c > 191) && (c < 224)) {\r\n        c2 = utftext.charCodeAt(i + 1);\r\n        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n        i += 2;\r\n      } else {\r\n        c2 = utftext.charCodeAt(i + 1);\r\n        c3 = utftext.charCodeAt(i + 2);\r\n        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        i += 3;\r\n      }\r\n    }\r\n    return string;\r\n  }\r\n}\n\n\nvar base64 = new Base64();\nvar s = result.match(/DATA\\s*= '([^']*)/)[1];\nvar pic = base64.decode(s.substring(s.length % 4))\npic.match(/picture\":([^\\]]*\\])/)[1]\n\n@json:$..url",
    "loginUrl": "",
    "cookies": "",
    "viewStyle": 0
}
