{
    "id": "3ddb4050-b0cb-4b51-9531-a4650058bed4",
    "createTime": 1592136478118310,
    "modifiedTime": 1592138434953946,
    "author": "üç†",
    "postScript": "",
    "name": "Êº´Áîªdb",
    "host": "https://www.manhuadb.com",
    "group": "",
    "contentType": 0,
    "sort": 0,
    "useCryptoJS": false,
    "loadJs": "",
    "userAgent": "",
    "enableDiscover": false,
    "discoverUrl": "",
    "discoverItems": "",
    "discoverList": "",
    "discoverTags": "",
    "discoverName": "",
    "discoverCover": "",
    "discoverAuthor": "",
    "discoverChapter": "",
    "discoverDescription": "",
    "discoverResult": "",
    "enableSearch": true,
    "searchUrl": "/search?q=$keyword&p=$page",
    "searchItems": "",
    "searchList": ".comicbook-index",
    "searchTags": "",
    "searchName": "h2@text",
    "searchCover": "img[data-original]@data-original",
    "searchAuthor": ".comic-author@text",
    "searchChapter": "",
    "searchDescription": "",
    "searchResult": "h2 a@href",
    "enableMultiRoads": false,
    "chapterRoads": "",
    "chapterRoadName": "",
    "chapterUrl": "",
    "chapterItems": "",
    "chapterList": ".links-of-books a",
    "chapterName": "text",
    "chapterCover": "",
    "chapterLock": "",
    "chapterTime": "",
    "chapterResult": "href",
    "contentUrl": "",
    "contentItems": "@js:\n/**\n*\n*  Base64 encode / decode\n*\n*  @author haitao.tu\n*  @date   2010-04-26\n*  @email  tuhaitao@foxmail.com\n*\n*/\n \nfunction Base64() {\n \n\t// private property\n\t_keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n \n\t// public method for encoding\n\tthis.encode = function (input) {\n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n\t\tvar i = 0;\n\t\tinput = _utf8_encode(input);\n\t\twhile (i < input.length) {\n\t\t\tchr1 = input.charCodeAt(i++);\n\t\t\tchr2 = input.charCodeAt(i++);\n\t\t\tchr3 = input.charCodeAt(i++);\n\t\t\tenc1 = chr1 >> 2;\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\tenc4 = chr3 & 63;\n\t\t\tif (isNaN(chr2)) {\n\t\t\t\tenc3 = enc4 = 64;\n\t\t\t} else if (isNaN(chr3)) {\n\t\t\t\tenc4 = 64;\n\t\t\t}\n\t\t\toutput = output +\n\t\t\t_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +\n\t\t\t_keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n\t\t}\n\t\treturn output;\n\t}\n \n\t// public method for decoding\n\tthis.decode = function (input) {\n\t\tvar output = \"\";\n\t\tvar chr1, chr2, chr3;\n\t\tvar enc1, enc2, enc3, enc4;\n\t\tvar i = 0;\n\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\t\twhile (i < input.length) {\n\t\t\tenc1 = _keyStr.indexOf(input.charAt(i++));\n\t\t\tenc2 = _keyStr.indexOf(input.charAt(i++));\n\t\t\tenc3 = _keyStr.indexOf(input.charAt(i++));\n\t\t\tenc4 = _keyStr.indexOf(input.charAt(i++));\n\t\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\n\t\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n\t\t\tchr3 = ((enc3 & 3) << 6) | enc4;\n\t\t\toutput = output + String.fromCharCode(chr1);\n\t\t\tif (enc3 != 64) {\n\t\t\t\toutput = output + String.fromCharCode(chr2);\n\t\t\t}\n\t\t\tif (enc4 != 64) {\n\t\t\t\toutput = output + String.fromCharCode(chr3);\n\t\t\t}\n\t\t}\n\t\toutput = _utf8_decode(output);\n\t\treturn output;\n\t}\n \n\t// private method for UTF-8 encoding\n\t_utf8_encode = function (string) {\n\t\tstring = string.replace(/\\r\\n/g,\"\\n\");\n\t\tvar utftext = \"\";\n\t\tfor (var n = 0; n < string.length; n++) {\n\t\t\tvar c = string.charCodeAt(n);\n\t\t\tif (c < 128) {\n\t\t\t\tutftext += String.fromCharCode(c);\n\t\t\t} else if((c > 127) && (c < 2048)) {\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n\t\t\t} else {\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n\t\t\t}\n \n\t\t}\n\t\treturn utftext;\n\t}\n \n\t// private method for UTF-8 decoding\n\t_utf8_decode = function (utftext) {\n\t\tvar string = \"\";\n\t\tvar i = 0;\n\t\tvar c = c1 = c2 = 0;\n\t\twhile ( i < utftext.length ) {\n\t\t\tc = utftext.charCodeAt(i);\n\t\t\tif (c < 128) {\n\t\t\t\tstring += String.fromCharCode(c);\n\t\t\t\ti++;\n\t\t\t} else if((c > 191) && (c < 224)) {\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\n\t\t\t\tstring += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t\ti += 2;\n\t\t\t} else {\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\n\t\t\t\tc3 = utftext.charCodeAt(i+2);\n\t\t\t\tstring += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t\ti += 3;\n\t\t\t}\n\t\t}\n\t\treturn string;\n\t}\n}\n\nlet baseUrl = result.match(/img-fluid show-pic\"\\s*src=\"([^\"]*)/)[1];\nlet lastIndex = baseUrl.lastIndexOf(\"/\");\nbaseUrl = baseUrl.substring(0, lastIndex+1);\nvar img_data = result.match(/img_data\\s*=\\s*'([^']*)/)[1];\nvar json = new Base64().decode(img_data);\nJSON.parse(json).map(image => baseUrl + image.img);"
}